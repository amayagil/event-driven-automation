---
- name: EDA | Insights | Show Advisory
  hosts: "{{ insights_adv_target_host }}"
  vars:
    insights_api_url: "https://console.redhat.com/api"
    insights_auth_user: "{{ rhsm_username }}"
    insights_auth_password: "{{ rhsm_password  }}"

  tasks:

    - name: Create a list for each host with advisories
      ansible.builtin.set_fact:
        hosts_with_adv: "{{ hosts_with_adv | default([]) + [{ 'hostname' : insights_adv_host_data.display_name, 
                                        'insights_id' : insights_adv_host_data.inventory_id,
                                        'advisory_id' : item.payload.advisory_id,
                                        'advisory_name' : item.payload.advisory_name,
                                        'advisory_type' : item.payload.advisory_type }] }}"
      loop: "{{ insights_adv_data }}"

    - name: Debug message
      ansible.builtin.debug:
        msg:
          - "hostname: {{ item.hostname }}"
          - "insights_id: {{ item.insights_id }}"
          - "advisory_id: {{ item.advisory_id }}"
          - "advisory_name: {{ item.advisory_name }}"
          - "advisory_type:  {{ item.advisory_type }}"
      loop: "{{ hosts_with_adv }}"

    - name: Get Insights Tags
      #no_log: true
      uri:
        url: "{{ insights_api_url }}/patch/v3/advisories/{{ item.advisory_name }}"
        method: GET
        return_content: yes
        user: "{{ insights_auth_user }}"
        password: "{{ insights_auth_password }}"
        force_basic_auth: yes
        status_code: 200
      register: insights_cves
      loop: "{{ hosts_with_adv }}"

    - name: Create a list for each host with CVEs
      ansible.builtin.set_fact:
        hosts_with_cve: "{{ hosts_with_cve | default([]) + [{ 'hostname' : insights_adv_host_data.display_name, 
                                        'insights_id' : insights_adv_host_data.inventory_id,
                                        'advisory_id' : item.json.data.id,
                                        'cves' : item.json.data.attributes.cves, 
                                        'advisory_type_name' : item.json.data.attributes.advisory_type_name,
                                        'severity' : item.json.data.attributes.severity,
                                        'description' : item.json.data.attributes.description }] }}"
      loop: "{{ insights_cves.results }}"
      when: item.json.data.attributes.cves | length > 0

    - name: Print out the list of CVEs for host "{{ insights_adv_target_host }}"
      ansible.builtin.debug:
        var: item
      loop: "{{ hosts_with_cve }}"

    - name: Create a list of CVEs
      ansible.builtin.set_fact:
        cve_list : "{{ cve_list | default([]) + item.cves }}"
      loop: "{{ hosts_with_cve }}"

    - name: Print out the list of CVEs for host "{{ insights_adv_target_host }}"
      ansible.builtin.debug:
        var: item
      loop: "{{ cve_list }}"

    - name: Generate playbooks to remediate vulnerabilities
      ansible.builtin.uri:
        url: "{{ insights_api_url }}/remediations/v1/playbook"
        method: POST
        user: "{{ insights_auth_user }}"
        password: "{{ insights_auth_password }}"
        validate_certs: no
        force_basic_auth: yes
        status_code: 200
        return_content: yes 
        headers:
          Content-Type: "application/json"
          accept: "text/vnd.yaml"
          Connection: "keep-alive"
        body_format: json
        # body: "{{ lookup('ansible.builtin.template','templates/pb_generator_body.j2') }}"
        body:
          issues:
            id: "vulnerabilities:{{ item }}"
            systems: 
              - "{{ insights_adv_target_host }}"
          auto_reboot: true
      register: pbs_per_host
      loop: "{{ cve_list }}"

    - name: print out cves_with_pb
      ansible.builtin.debug:
        msg: "{{ item.content }}"
      loop: "{{ pbs_per_host.results }}"

    - name: Insights | Create playbooks locally
      ansible.builtin.copy:
        dest: "{{ playbook_dir }}/{{ item.item.cve_id }}-remediation-{{ item.item.hostname }}.yml"
        content: "{{ item.content }}"
        mode: "0755"
      loop: "{{ pbs_per_host.results }}"

    - name: Run CVE remediation playbook on "{{ dns_name }}"
      ansible.builtin.shell:
        cmd: ansible-playbook -i azure_rm.yml -e ansible_user="{{ ansible_user }}" -e ansible_password="{{ ansible_password }}" "{{ playbook_dir }}/{{ item.item.cve_id }}-remediation-{{ item.item.hostname }}.yml"
      loop: "{{ pbs_per_host.results }}"
      delegate_to: localhost
      when: 
        - cloud == 'azure'
        - ansible_os_family == 'RedHat'
        - ansible_facts['distribution'] == "RedHat"

    - name: Run CVE remediation playbook on "{{ dns_name }}"
      ansible.builtin.shell:
        cmd: ansible-playbook -i aws_ec2.yml -e ansible_user="{{ ansible_user }}" -e ansible_ssh_private_key_file="{{ ssh_key_data }}" "{{ playbook_dir }}/{{ item.item.cve_id }}-remediation-{{ item.item.hostname }}.yml"
      loop: "{{ pbs_per_host.results }}"
      delegate_to: localhost
      when: 
        - cloud == 'ec2'
        - ansible_os_family == 'RedHat'
        - ansible_facts['distribution'] == "RedHat"
        - ansible_ssh_private_key_file is defined

    - name: Run CVE remediation playbook on "{{ dns_name }}"
      ansible.builtin.shell:
        cmd: ansible-playbook -i aws_ec2.yml -e ansible_user="{{ ansible_user }}" -e ansible_password="{{ ansible_password }}" "{{ playbook_dir }}/{{ item.item.cve_id }}-remediation-{{ item.item.hostname }}.yml"
      loop: "{{ pbs_per_host.results }}"
      delegate_to: localhost
      when: 
        - cloud == 'ec2'
        - ansible_os_family == 'RedHat'
        - ansible_facts['distribution'] == "RedHat"
        - ansible_password is defined

    - name: Run CVE remediation playbook on "{{ dns_name }}"
      ansible.builtin.shell:
        cmd: ansible-playbook -i aws_ec2.yml -e ansible_user="{{ ansible_user }}" -e ansible_ssh_private_key_file="{{ ssh_key_data }}" "{{ playbook_dir }}/{{ item.item.cve_id }}-remediation-{{ item.item.hostname }}.yml"
      loop: "{{ pbs_per_host.results }}"
      delegate_to: localhost
      when: 
        - cloud == 'ec2'
        - ansible_os_family == 'RedHat'
        - ansible_facts['distribution'] == "RedHat"
        - ansible_ssh_private_key_file is defined
